const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
require('dotenv').config();

console.log('=== EXECUTANDO CRIA√á√ÉO DO USU√ÅRIO ADMIN ===\n');

async function executeAdminCreation() {
  try {
    // Configurar cliente Supabase
    const supabaseUrl = process.env.VITE_SUPABASE_URL;
    const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
    
    if (!supabaseUrl || !supabaseKey) {
      throw new Error('Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY s√£o obrigat√≥rias');
    }

    console.log('üìã CONFIGURA√á√ÉO:');
    console.log(`   URL: ${supabaseUrl}`);
    console.log(`   Chave: ${supabaseKey.substring(0, 20)}...\n`);

    const supabase = createClient(supabaseUrl, supabaseKey);

    // 1. Remover todos os usu√°rios existentes
    console.log('1. Removendo usu√°rios existentes...');
    const { error: deleteError } = await supabase
      .from('profiles')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000'); // Delete all
    
    if (deleteError) {
      console.log(`   ‚ö†Ô∏è  Aviso ao remover usu√°rios: ${deleteError.message}`);
    } else {
      console.log('   ‚úÖ Usu√°rios existentes removidos');
    }

    // 2. Criar novo usu√°rio admin
    console.log('\n2. Criando usu√°rio admin...');
    const { data: insertData, error: insertError } = await supabase
      .from('profiles')
      .insert({
        username: 'admin',
        display_name: 'Administrador',
        role: 'admin',
        password_hash: '$2b$10$5EnGfQWsZ2O9xX.TdNYiu.vvkrZCOEOnIFlzhQPYp03ojsqeUl77O'
      })
      .select();

    if (insertError) {
      console.error(`   ‚ùå Erro ao criar usu√°rio: ${insertError.message}`);
      throw insertError;
    }

    console.log('   ‚úÖ Usu√°rio admin criado com sucesso!');
    console.log(`   üìã Dados: ${JSON.stringify(insertData, null, 2)}`);

    // 3. Verificar se o usu√°rio foi criado
    console.log('\n3. Verificando cria√ß√£o do usu√°rio...');
    const { data: verifyData, error: verifyError } = await supabase
      .from('profiles')
      .select('id, username, display_name, role, created_at')
      .eq('username', 'admin')
      .single();

    if (verifyError) {
      console.error(`   ‚ùå Erro ao verificar usu√°rio: ${verifyError.message}`);
      throw verifyError;
    }

    console.log('   ‚úÖ Usu√°rio verificado com sucesso!');
    console.log(`   üìã Detalhes:`);
    console.log(`      ID: ${verifyData.id}`);
    console.log(`      Username: ${verifyData.username}`);
    console.log(`      Nome: ${verifyData.display_name}`);
    console.log(`      Role: ${verifyData.role}`);
    console.log(`      Criado em: ${verifyData.created_at}`);

    // 4. Contar total de usu√°rios
    console.log('\n4. Contando total de usu√°rios...');
    const { count, error: countError } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true });

    if (countError) {
      console.error(`   ‚ùå Erro ao contar usu√°rios: ${countError.message}`);
    } else {
      console.log(`   üìä Total de usu√°rios: ${count}`);
    }

    console.log('\nüéØ PR√ìXIMOS PASSOS:');
    console.log('   1. Execute: node scripts/verify-admin-login.cjs');
    console.log('   2. Teste o login na aplica√ß√£o com:');
    console.log('      - Usu√°rio: admin');
    console.log('      - Senha: admin123');
    
    console.log('\n‚úÖ USU√ÅRIO ADMIN CRIADO COM SUCESSO!');
    
  } catch (error) {
    console.error('\n‚ùå ERRO GERAL:', error.message);
    console.error('   Stack:', error.stack);
    process.exit(1);
  }
}

// Executar o script
executeAdminCreation();