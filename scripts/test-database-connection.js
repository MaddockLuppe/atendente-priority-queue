// Teste de conex√£o com banco de dados
import { createClient } from '@supabase/supabase-js';
import bcrypt from 'bcryptjs';
import fs from 'fs';

// Verificar se arquivo .env existe
const hasEnvFile = fs.existsSync('.env');

// URLs de exemplo (como no c√≥digo atual)
const supabaseUrl = 'https://exemplo.supabase.co';
const supabaseAnonKey = 'exemplo_key';

const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  }
});

// Fun√ß√£o para testar conex√£o com banco de dados
async function testDatabaseConnection() {
  console.log('=== TESTE DE CONEX√ÉO COM BANCO DE DADOS ===\n');
  
  // Status da configura√ß√£o
  console.log('üìã STATUS DA CONFIGURA√á√ÉO:');
  console.log(`   Arquivo .env: ${hasEnvFile ? '‚úÖ Existe' : '‚ùå N√£o encontrado'}`);
  console.log(`   URL Supabase: ${supabaseUrl}`);
  console.log(`   Chave: ${supabaseAnonKey.substring(0, 15)}...`);
  
  if (supabaseUrl === 'https://exemplo.supabase.co') {
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Usando URLs de exemplo!');
    console.log('   Para conectar ao banco real:');
    console.log('   1. Copie .env.example para .env');
    console.log('   2. Configure VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY');
    console.log('   3. Reinicie o servidor\n');
  }
  
  try {
    // 1. Testar conex√£o b√°sica
    console.log('1. Testando conex√£o b√°sica...');
    const { data: healthCheck, error: healthError } = await supabase
      .from('profiles')
      .select('count')
      .limit(1);
    
    if (healthError) {
      console.log('‚ùå ERRO na conex√£o:', healthError.message);
      console.log('Detalhes:', healthError);
      return;
    }
    
    console.log('‚úÖ Conex√£o com banco estabelecida\n');
    
    // 2. Listar usu√°rios existentes
    console.log('2. Listando usu√°rios existentes...');
    const { data: users, error: usersError } = await supabase
      .from('profiles')
      .select('id, username, display_name, role, created_at, updated_at');
    
    if (usersError) {
      console.log('‚ùå ERRO ao buscar usu√°rios:', usersError.message);
      return;
    }
    
    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado no banco de dados');
      return;
    }
    
    console.log(`‚úÖ Encontrados ${users.length} usu√°rios:`);
    users.forEach(user => {
      console.log(`  - ${user.username} (${user.display_name}) - ${user.role}`);
      console.log(`    Criado: ${user.created_at}`);
      if (user.updated_at) {
        console.log(`    Atualizado: ${user.updated_at}`);
      }
    });
    console.log('');
    
    // 3. Testar regras de login para cada usu√°rio
    console.log('3. Testando regras de login...');
    
    const testCredentials = [
      { username: 'lucas', password: '12061409' },
      { username: 'abassa', password: 'xangoeoxum@2025@' }
    ];
    
    for (const cred of testCredentials) {
      console.log(`\nTestando login: ${cred.username}`);
      
      // Buscar dados do usu√°rio
      const { data: profileData, error: profileError } = await supabase
        .from('profiles')
        .select('id, username, display_name, role, password_hash')
        .eq('username', cred.username)
        .single();
      
      if (profileError) {
        console.log(`‚ùå Usu√°rio ${cred.username} n√£o encontrado:`, profileError.message);
        continue;
      }
      
      if (!profileData) {
        console.log(`‚ùå Dados do usu√°rio ${cred.username} n√£o retornados`);
        continue;
      }
      
      console.log(`  ‚úÖ Usu√°rio encontrado: ${profileData.display_name}`);
      console.log(`  üìã Papel: ${profileData.role}`);
      console.log(`  üîë Hash: ${profileData.password_hash.substring(0, 20)}...`);
      
      // Testar senha
      try {
        const isValid = await bcrypt.compare(cred.password, profileData.password_hash);
        console.log(`  üîê Senha: ${isValid ? '‚úÖ V√ÅLIDA' : '‚ùå INV√ÅLIDA'}`);
        
        if (!isValid) {
          console.log(`  ‚ö†Ô∏è  Hash atual n√£o confere com a senha fornecida`);
          
          // Gerar hash correto para compara√ß√£o
          const correctHash = await bcrypt.hash(cred.password, 10);
          const testCorrect = await bcrypt.compare(cred.password, correctHash);
          console.log(`  üîß Hash correto seria v√°lido: ${testCorrect ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
        }
      } catch (bcryptError) {
        console.log(`  ‚ùå Erro ao verificar senha:`, bcryptError.message);
      }
    }
    
    // 4. Verificar pol√≠ticas RLS
    console.log('\n4. Verificando pol√≠ticas RLS...');
    
    try {
      // Tentar acessar sem autentica√ß√£o (deve funcionar para login)
      const { data: anonAccess, error: anonError } = await supabase
        .from('profiles')
        .select('username')
        .limit(1);
      
      if (anonError) {
        console.log('‚ùå Acesso an√¥nimo bloqueado:', anonError.message);
        console.log('‚ö†Ô∏è  Isso pode impedir o login. Verifique as pol√≠ticas RLS.');
      } else {
        console.log('‚úÖ Acesso an√¥nimo permitido (necess√°rio para login)');
      }
    } catch (rlsError) {
      console.log('‚ùå Erro ao testar RLS:', rlsError.message);
    }
    
    // 5. Resumo
    console.log('\n=== RESUMO ===');
    console.log('‚úÖ Conex√£o: OK');
    console.log(`‚úÖ Usu√°rios: ${users.length} encontrados`);
    
    const validLogins = testCredentials.filter(async cred => {
      const { data } = await supabase
        .from('profiles')
        .select('password_hash')
        .eq('username', cred.username)
        .single();
      
      if (data) {
        return await bcrypt.compare(cred.password, data.password_hash);
      }
      return false;
    });
    
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Se houver hashes inv√°lidos, execute: npm run fix-passwords');
    console.log('2. Aplique o SQL gerado no Supabase Dashboard');
    console.log('3. Teste o login na aplica√ß√£o');
    console.log('4. Configure as vari√°veis de ambiente (.env) se necess√°rio');
    
  } catch (error) {
    console.log('‚ùå ERRO GERAL:', error.message);
    console.log('Stack:', error.stack);
    
    if (error.message.includes('Vari√°veis de ambiente')) {
      console.log('\nüîß SOLU√á√ÉO:');
      console.log('1. Copie .env.example para .env');
      console.log('2. Configure VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY');
      console.log('3. Reinicie o servidor de desenvolvimento');
    }
  }
}

// Executar teste
testDatabaseConnection().catch(console.error);